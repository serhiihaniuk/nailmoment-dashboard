// src/app/api/bot/route.ts

import { Bot, Context, InlineKeyboard, webhookCallback } from "grammy";
import { db } from "@/shared/db";
import { speakerVoteTGTable } from "@/shared/db/schema";
import { eq } from "drizzle-orm";
import { nanoid } from "nanoid";

const token = process.env.TG_BOT;
if (!token) throw new Error("BOT_TOKEN is unset");

const bot = new Bot(token);

// --- CONSTANTS AND KEYBOARD GENERATORS ---
const WELCOME_MESSAGE = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç Nail Moment... (your full welcome message)`;

const SPEAKERS = [
  { id: "video_1", file_id: "PASTE_YOUR_REAL_FILE_ID_FOR_VIDEO_1" },
  { id: "video_2", file_id: "PASTE_YOUR_REAL_FILE_ID_FOR_VIDEO_2" },
  // ... and so on for all 10 videos
];

function generateVotingKeyboard() {
  const keyboard = new InlineKeyboard();
  SPEAKERS.forEach((speaker, index) => {
    keyboard.text(`–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –í—ñ–¥–µ–æ #${index + 1}`, `vote:${index + 1}`);
    if ((index + 1) % 2 === 0) keyboard.row();
  });
  return keyboard;
}

function generateMainMenuKeyboard() {
  return new InlineKeyboard().text(
    "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–µ–æ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è",
    "show_videos"
  );
}

function generatePostVoteKeyboard() {
  return new InlineKeyboard()
    .text("–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å üîÑ", "reset_vote")
    .row()
    .text("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main_menu");
}

// --- CORE LOGIC HANDLER ---
async function handleShowVotingProcess(ctx: Context) {
  const telegramUserId = ctx.from!.id;
  try {
    const existingVote = await db
      .select()
      .from(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId))
      .limit(1);

    if (existingVote.length > 0) {
      await ctx.editMessageText(
        `–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞: ${existingVote[0].voted_for_id}.`,
        { reply_markup: generatePostVoteKeyboard() }
      );
    } else {
      await ctx.reply("–ó–∞—Ä–∞–∑ —è –Ω–∞–¥—ñ—à–ª—é –≤—ñ–¥–µ–æ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É...");

      for (const speaker of SPEAKERS) {
        await ctx.replyWithVideo(speaker.file_id, {
          caption: `–¶–µ –í—ñ–¥–µ–æ #${speaker.id.split("_")[1]}`,
        });
      }

      await ctx.editMessageText(
        "–í—ñ–¥–µ–æ –≤–∏—â–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        { reply_markup: generateVotingKeyboard() }
      );
    }
  } catch (error) {
    console.error("Error in handleShowVotingProcess:", error);
    await ctx.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

// --- BOT COMMANDS AND CALLBACKS ---
bot.command("start", async (ctx) => {
  await ctx.reply(WELCOME_MESSAGE, {
    reply_markup: generateMainMenuKeyboard(),
  });
});

bot.command("vote", async (ctx) => {
  const tempMessage = await ctx.reply("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
  ctx.update.callback_query = {
    id: "",
    from: ctx.from!,
    message: tempMessage,
    chat_instance: "",
    data: "show_videos",
  };
  await handleShowVotingProcess(ctx);
});

bot.callbackQuery("show_videos", async (ctx) => {
  await ctx.answerCallbackQuery();
  await handleShowVotingProcess(ctx);
});

bot.callbackQuery("reset_vote", async (ctx) => {
  const telegramUserId = ctx.from!.id;
  try {
    await db
      .delete(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId));
    await ctx.answerCallbackQuery({ text: "–í–∞—à –≥–æ–ª–æ—Å —Å–∫–∏–Ω—É—Ç–æ!" });

    await ctx.reply("–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É. –ù–∞–¥—Å–∏–ª–∞—é –≤—ñ–¥–µ–æ...");
    for (const speaker of SPEAKERS) {
      await ctx.replyWithVideo(speaker.file_id, {
        caption: `–¶–µ –í—ñ–¥–µ–æ #${speaker.id.split("_")[1]}`,
      });
    }

    await ctx.editMessageText(
      "–í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å –≤–∏–¥–∞–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É:",
      { reply_markup: generateVotingKeyboard() }
    );
  } catch (error) {
    console.error("Error resetting vote:", error);
    await ctx.answerCallbackQuery({
      text: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∏–¥–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
      show_alert: true,
    });
  }
});

bot.callbackQuery(/^vote:(\d+)$/, async (ctx) => {
  const telegramUserId = ctx.from!.id;

  const existingVote = await db
    .select()
    .from(speakerVoteTGTable)
    .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId))
    .limit(1);
  if (existingVote.length > 0) {
    await ctx.answerCallbackQuery({
      text: "–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å'.",
    });
    return;
  }

  try {
    const videoNumber = ctx.match[1];
    const votedForId = `video_${videoNumber}`;

    await db.insert(speakerVoteTGTable).values({
      id: nanoid(),
      telegram_user_id: telegramUserId,
      voted_for_id: votedForId,
    });

    await ctx.answerCallbackQuery({ text: "–î—è–∫—É—é! –í–∞—à –≥–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ." });

    await ctx.editMessageText(
      `‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏ ${votedForId.replace("_", " ")}.`,
      { reply_markup: generatePostVoteKeyboard() }
    );
  } catch (error) {
    console.error("Error processing vote (likely a race condition):", error);
    await ctx.answerCallbackQuery({
      text: "–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.",
      show_alert: true,
    });
  }
});

bot.callbackQuery("main_menu", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageText(WELCOME_MESSAGE, {
    reply_markup: generateMainMenuKeyboard(),
  });
});

// ===================================================================
// === NEW: TEMPORARY HANDLER FOR GETTING VIDEO FILE_IDS           ===
// ===================================================================
// This listener will catch any message that is a video.
bot.on("message:video", async (ctx) => {
  const fileId = ctx.message.video.file_id;

  // Reply to the user with the file_id, formatted for easy copying.
  await ctx.reply(`–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ. \n\n–í–∞—à file_id: \`${fileId}\``, {
    parse_mode: "MarkdownV2",
  });
});
// ===================================================================

// This is the fallback for any TEXT message that isn't handled above.
bot.on("message:text", async (ctx) => {
  await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.");
});

// --- WEBHOOK SETUP ---
export const POST = webhookCallback(bot, "std/http");
