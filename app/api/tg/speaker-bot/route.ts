import { Bot, Context, InlineKeyboard, webhookCallback } from "grammy";
import type { InputMediaPhoto } from "@grammyjs/types";
import { db } from "@/shared/db";
import { battleVoteTGTable, telegramUsersTable } from "@/shared/db/schema";
import { eq, and } from "drizzle-orm";
import { nanoid } from "nanoid";
import { BATTLE_CATEGORIES } from "@/shared/const";

const token = process.env.TG_BOT;
if (!token) throw new Error("BOT_TOKEN is unset");

const bot = new Bot(token);

const WELCOME_MESSAGE_PART_1 = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç Nail Moment... (full message)`;
const WELCOME_MESSAGE_PART_2 = `üìπ –í—ñ–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ñ!... (full message)`;

function escapeMarkdownV2(text: string): string {
  const charsToEscape = /[_\[\]()~`>#+\-=|{}.!]/g;
  return text.replace(charsToEscape, (char) => `\\${char}`);
}

function generateSliderKeyboard(
  contestantId: string,
  currentPhotoIndex: number,
  totalPhotos: number,
  hasVotedForThis: boolean
): InlineKeyboard {
  const keyboard = new InlineKeyboard();
  keyboard.text(
    currentPhotoIndex > 0 ? "‚óÄÔ∏è" : " ",
    currentPhotoIndex > 0
      ? `slide:prev:${contestantId}:${currentPhotoIndex}`
      : "noop"
  );
  keyboard.text(`–§–æ—Ç–æ ${currentPhotoIndex + 1}/${totalPhotos}`, "noop");
  keyboard.text(
    currentPhotoIndex < totalPhotos - 1 ? "‚ñ∂Ô∏è" : " ",
    currentPhotoIndex < totalPhotos - 1
      ? `slide:next:${contestantId}:${currentPhotoIndex}`
      : "noop"
  );
  keyboard.row();
  if (hasVotedForThis) {
    keyboard.text("–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å üîÑ", `reset_vote:${contestantId}`);
  } else {
    keyboard.text("–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Ü—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ üëç", `vote:${contestantId}`);
  }
  return keyboard;
}

// --- CORE LOGIC ---

async function initiateVotingFlow(ctx: Context) {
  if (!ctx.from) return;
  const telegramUserId = ctx.from.id;

  try {
    const activeCategory = BATTLE_CATEGORIES.find((cat) => cat.isActive);
    if (!activeCategory || activeCategory.contestants.length === 0) {
      await ctx.reply(
        "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!"
      );
      return;
    }

    const existingVote = await db
      .select()
      .from(battleVoteTGTable)
      .where(
        and(
          eq(battleVoteTGTable.telegram_user_id, telegramUserId),
          eq(battleVoteTGTable.category_id, activeCategory.id)
        )
      )
      .limit(1);
    const votedForContestantId =
      existingVote.length > 0 ? existingVote[0].voted_for_contestant_id : null;

    await ctx.reply(
      escapeMarkdownV2(`–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: *${activeCategory.name}*`),
      { parse_mode: "MarkdownV2" }
    );

    for (const contestant of activeCategory.contestants) {
      if (contestant.photo_file_ids.length === 0) continue;

      const hasVotedForThis = contestant.id === votedForContestantId;
      const caption = escapeMarkdownV2(
        hasVotedForThis
          ? `‚úÖ –í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞: ${contestant.name}`
          : `–£—á–∞—Å–Ω–∏–∫: ${contestant.name}`
      );
      const keyboard = generateSliderKeyboard(
        contestant.id,
        0,
        contestant.photo_file_ids.length,
        hasVotedForThis
      );

      await ctx.replyWithPhoto(contestant.photo_file_ids[0], {
        caption,
        reply_markup: keyboard,
        parse_mode: "MarkdownV2",
      });
    }
  } catch (error) {
    console.error("Error in initiateVotingFlow:", error);
    await ctx.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

// --- BOT COMMANDS & CALLBACKS ---

bot.command("start", async (ctx) => {
  if (!ctx.from) return;
  try {
    await db
      .insert(telegramUsersTable)
      .values({
        telegramUserId: ctx.from.id,
        firstName: ctx.from.first_name,
        username: ctx.from.username,
      })
      .onConflictDoNothing();
  } catch (error) {
    console.error("Failed to save user:", error);
  }

  const showVotesKeyboard = new InlineKeyboard().text(
    "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è",
    "show_votes"
  );
  await ctx.reply(escapeMarkdownV2(WELCOME_MESSAGE_PART_1), {
    parse_mode: "MarkdownV2",
  });
  await ctx.reply(escapeMarkdownV2(WELCOME_MESSAGE_PART_2), {
    reply_markup: showVotesKeyboard,
    parse_mode: "MarkdownV2",
  });
});

bot.callbackQuery("show_votes", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageReplyMarkup();
  await initiateVotingFlow(ctx);
});

bot.callbackQuery(/^slide:(prev|next):(.+):(\d+)$/, async (ctx) => {
  if (!ctx.from) return;
  const [, direction, contestantId, currentIndexStr] = ctx.match;
  const currentIndex = parseInt(currentIndexStr, 10);
  const activeCategory = BATTLE_CATEGORIES.find((cat) => cat.isActive);
  const contestant = activeCategory?.contestants.find(
    (c) => c.id === contestantId
  );
  if (!contestant)
    return await ctx.answerCallbackQuery({
      text: "–ü–æ–º–∏–ª–∫–∞: —É—á–∞—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
    });

  const newIndex = direction === "next" ? currentIndex + 1 : currentIndex - 1;
  if (newIndex < 0 || newIndex >= contestant.photo_file_ids.length) {
    return await ctx.answerCallbackQuery();
  }

  const existingVote = await db
    .select()
    .from(battleVoteTGTable)
    .where(
      and(
        eq(battleVoteTGTable.telegram_user_id, ctx.from.id),
        eq(battleVoteTGTable.category_id, activeCategory!.id)
      )
    )
    .limit(1);
  const hasVotedForThis =
    existingVote.length > 0 &&
    existingVote[0].voted_for_contestant_id === contestantId;

  const newCaption = escapeMarkdownV2(
    hasVotedForThis
      ? `‚úÖ –í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞: ${contestant.name}`
      : `–£—á–∞—Å–Ω–∏–∫: ${contestant.name}`
  );
  const newKeyboard = generateSliderKeyboard(
    contestantId,
    newIndex,
    contestant.photo_file_ids.length,
    hasVotedForThis
  );

  const newPhoto: InputMediaPhoto<string> = {
    type: "photo",
    media: contestant.photo_file_ids[newIndex],
    caption: newCaption,
    parse_mode: "MarkdownV2",
  };

  await ctx.answerCallbackQuery();
  await ctx.editMessageMedia(newPhoto, { reply_markup: newKeyboard });
});

bot.callbackQuery(/^vote:(.+)$/, async (ctx) => {
  if (!ctx.from) return;
  const contestantId = ctx.match[1];
  const telegramUserId = ctx.from.id;
  const activeCategory = BATTLE_CATEGORIES.find((cat) => cat.isActive)!;
  const contestant = activeCategory.contestants.find(
    (c) => c.id === contestantId
  )!;
  const existingVote = await db
    .select()
    .from(battleVoteTGTable)
    .where(
      and(
        eq(battleVoteTGTable.telegram_user_id, telegramUserId),
        eq(battleVoteTGTable.category_id, activeCategory.id)
      )
    )
    .limit(1);
  if (existingVote.length > 0) {
    return await ctx.answerCallbackQuery({
      text: "–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∏–Ω—å—Ç–µ —Å–≤—ñ–π –≥–æ–ª–æ—Å.",
    });
  }
  try {
    await db.insert(battleVoteTGTable).values({
      id: nanoid(),
      telegram_user_id: telegramUserId,
      category_id: activeCategory.id,
      voted_for_contestant_id: contestantId,
    });
    await ctx.answerCallbackQuery({ text: "–î—è–∫—É—é! –í–∞—à –≥–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ." });

    // --- THIS IS THE FIX ---
    // Access the message via ctx.callbackQuery.message, not ctx.message
    const buttonText =
      ctx.callbackQuery.message?.reply_markup?.inline_keyboard[0][1]?.text ||
      "–§–æ—Ç–æ 1/";
    const match = buttonText.match(/–§–æ—Ç–æ (\d+)\//);
    const currentPhotoIndex = match ? parseInt(match[1], 10) - 1 : 0;

    const newKeyboard = generateSliderKeyboard(
      contestant.id,
      currentPhotoIndex,
      contestant.photo_file_ids.length,
      true
    );
    await ctx.editMessageReplyMarkup({ reply_markup: newKeyboard });
    await ctx.editMessageCaption({
      caption: escapeMarkdownV2(
        `‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏: ${contestant.name}`
      ),
      parse_mode: "MarkdownV2",
    });
  } catch (error) {
    console.error("Error processing vote:", error);
    await ctx.answerCallbackQuery({
      text: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
      show_alert: true,
    });
  }
});

bot.callbackQuery(/^reset_vote:(.+)$/, async (ctx) => {
  if (!ctx.from) return;
  const contestantId = ctx.match[1];
  const telegramUserId = ctx.from.id;
  const activeCategory = BATTLE_CATEGORIES.find((cat) => cat.isActive)!;
  const contestant = activeCategory.contestants.find(
    (c) => c.id === contestantId
  )!;
  try {
    await db
      .delete(battleVoteTGTable)
      .where(
        and(
          eq(battleVoteTGTable.telegram_user_id, telegramUserId),
          eq(battleVoteTGTable.category_id, activeCategory.id)
        )
      );
    await ctx.answerCallbackQuery({ text: "–í–∞—à –≥–æ–ª–æ—Å —Å–∫–∏–Ω—É—Ç–æ!" });

    // --- THIS IS THE FIX ---
    // Access the message via ctx.callbackQuery.message, not ctx.message
    const buttonText =
      ctx.callbackQuery.message?.reply_markup?.inline_keyboard[0][1]?.text ||
      "–§–æ—Ç–æ 1/";
    const match = buttonText.match(/–§–æ—Ç–æ (\d+)\//);
    const currentPhotoIndex = match ? parseInt(match[1], 10) - 1 : 0;

    const newKeyboard = generateSliderKeyboard(
      contestant.id,
      currentPhotoIndex,
      contestant.photo_file_ids.length,
      false
    );
    await ctx.editMessageReplyMarkup({ reply_markup: newKeyboard });
    await ctx.editMessageCaption({
      caption: escapeMarkdownV2(`–£—á–∞—Å–Ω–∏–∫: ${contestant.name}`),
      parse_mode: "MarkdownV2",
    });
  } catch (error) {
    console.error("Error resetting vote:", error);
    await ctx.answerCallbackQuery({
      text: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∏–¥–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
      show_alert: true,
    });
  }
});

bot.on("message:photo", async (ctx) => {
  const photo = ctx.message.photo[ctx.message.photo.length - 1];
  const fileId = photo.file_id;
  const safeText = escapeMarkdownV2(`–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ. \n\n–í–∞—à file_id: `);
  await ctx.reply(`${safeText}\`${fileId}\``, { parse_mode: "MarkdownV2" });
});

// --- WEBHOOK SETUP ---
export const POST = webhookCallback(bot, "std/http");
