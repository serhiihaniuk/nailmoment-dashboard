// src/app/api/bot/route.ts

import { Bot, Context, InlineKeyboard, webhookCallback } from "grammy";
import { db } from "@/shared/db";
import { speakerVoteTGTable } from "@/shared/db/schema";
import { eq } from "drizzle-orm";
import { nanoid } from "nanoid";

const token = process.env.TG_BOT;
if (!token) throw new Error("BOT_TOKEN is unset");

const bot = new Bot(token);

// --- CONSTANTS & HELPERS ---
const WELCOME_MESSAGE = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç Nail Moment... (your full welcome message)`;

const videoFileId =
  "BAACAgIAAxkBAAM4aFKy9LgXGvquLiQOKW-6yJ-S92MAArR3AAJaF5FKinLH6B9VFCA2BA";
const SPEAKERS = Array.from({ length: 10 }, (_, i) => ({
  id: `video_${i + 1}`,
  file_id: videoFileId,
}));

function escapeMarkdownV2(text: string): string {
  const charsToEscape = /[_\[\]()~`>#+\-=|{}.!]/g;
  return text.replace(charsToEscape, (char) => `\\${char}`);
}

// --- CORE LOGIC ---

async function initiateVotingFlow(ctx: Context) {
  const telegramUserId = ctx.from!.id;
  try {
    const existingVote = await db
      .select()
      .from(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId))
      .limit(1);

    if (existingVote.length > 0) {
      const votedForId = existingVote[0].voted_for_id;
      const videoIndex = SPEAKERS.findIndex((s) => s.id === votedForId);
      const videoNumber = videoIndex + 1;

      if (videoIndex !== -1) {
        await ctx.reply(
          escapeMarkdownV2("–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –û—Å—å –≤–∞—à –≤–∏–±—ñ—Ä:"),
          { parse_mode: "MarkdownV2" }
        );
        const resetKeyboard = new InlineKeyboard().text(
          "–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å üîÑ",
          `reset_vote:${videoNumber}`
        );
        await ctx.replyWithVideo(SPEAKERS[videoIndex].file_id, {
          caption: escapeMarkdownV2(`‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –í—ñ–¥–µ–æ #${videoNumber}`),
          reply_markup: resetKeyboard,
          parse_mode: "MarkdownV2",
        });
      }
    } else {
      await ctx.reply(
        escapeMarkdownV2(
          "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—ñ–¥–µ–æ —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä:"
        ),
        { parse_mode: "MarkdownV2" }
      );
      for (let i = 0; i < SPEAKERS.length; i++) {
        const videoNumber = i + 1;
        const speaker = SPEAKERS[i];
        const voteKeyboard = new InlineKeyboard().text(
          "–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Ü–µ üëç",
          `vote:${videoNumber}`
        );
        await ctx.replyWithVideo(speaker.file_id, {
          caption: escapeMarkdownV2(`–¶–µ –í—ñ–¥–µ–æ #${videoNumber}`),
          reply_markup: voteKeyboard,
          parse_mode: "MarkdownV2",
        });
      }
    }
  } catch (error) {
    console.error("Error in initiateVotingFlow:", error);
    await ctx.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

// --- BOT COMMANDS AND CALLBACKS ---

bot.command("start", async (ctx) => {
  const showVideosKeyboard = new InlineKeyboard().text(
    "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–µ–æ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è",
    "show_videos"
  );
  await ctx.reply(escapeMarkdownV2(WELCOME_MESSAGE), {
    reply_markup: showVideosKeyboard,
    parse_mode: "MarkdownV2",
  });
});

bot.command("vote", (ctx) => initiateVotingFlow(ctx));

bot.callbackQuery("show_videos", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageReplyMarkup();
  await initiateVotingFlow(ctx);
});

bot.callbackQuery(/^vote:(\d+)$/, async (ctx) => {
  const telegramUserId = ctx.from!.id;
  const videoNumber = parseInt(ctx.match[1], 10);
  const votedForId = `video_${videoNumber}`;

  const existingVote = await db
    .select()
    .from(speakerVoteTGTable)
    .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId))
    .limit(1);
  if (existingVote.length > 0) {
    await ctx.answerCallbackQuery({
      text: "–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∏–Ω—å—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å.",
    });
    return;
  }

  try {
    await db.insert(speakerVoteTGTable).values({
      id: nanoid(),
      telegram_user_id: telegramUserId,
      voted_for_id: votedForId,
    });
    await ctx.answerCallbackQuery({ text: "–î—è–∫—É—é! –í–∞—à –≥–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ." });

    const resetKeyboard = new InlineKeyboard().text(
      "–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å üîÑ",
      `reset_vote:${videoNumber}`
    );
    await ctx.editMessageCaption({
      caption: escapeMarkdownV2(
        `‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏ –í—ñ–¥–µ–æ #${videoNumber}`
      ),
      reply_markup: resetKeyboard,
      parse_mode: "MarkdownV2",
    });
  } catch (error) {
    console.error("Error processing vote:", error);
    await ctx.answerCallbackQuery({
      text: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∞–±–æ –≤–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.",
      show_alert: true,
    });
  }
});

// --- THIS IS THE CORRECTED BLOCK ---
bot.callbackQuery(/^reset_vote:(\d+)$/, async (ctx) => {
  const telegramUserId = ctx.from!.id;

  try {
    // 1. Delete the user's vote from the database
    await db
      .delete(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId));

    // 2. Acknowledge the click with a helpful popup
    await ctx.answerCallbackQuery({
      text: "–í–∞—à –≥–æ–ª–æ—Å —Å–∫–∏–Ω—É—Ç–æ! –ù–∞–¥—Å–∏–ª–∞—é –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–Ω–æ–≤—É...",
    });

    // 3. Clean up the message where the button was clicked
    await ctx.editMessageCaption({
      caption: escapeMarkdownV2("‚úÖ –í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å –≤–∏–¥–∞–ª–µ–Ω–æ."),
      parse_mode: "MarkdownV2",
      // The keyboard is removed automatically by not providing a `reply_markup`
    });

    // 4. CRITICAL FIX: Re-run the main voting flow.
    // Since the user's vote is now deleted, this will show them all 10 videos again.
    await initiateVotingFlow(ctx);
  } catch (error) {
    console.error("Error resetting vote:", error);
    await ctx.answerCallbackQuery({
      text: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∏–¥–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
      show_alert: true,
    });
  }
});

// --- The rest of the file remains the same ---

bot.on("message:video", async (ctx) => {
  const fileId = ctx.message.video.file_id;
  const safeText = escapeMarkdownV2(`–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ. \n\n–í–∞—à file_id: `);
  await ctx.reply(`${safeText}\`${fileId}\``, { parse_mode: "MarkdownV2" });
});

bot.on("message:text", async (ctx) => {
  await ctx.reply(
    escapeMarkdownV2(
      "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
    )
  );
});

// --- WEBHOOK SETUP ---
export const POST = webhookCallback(bot, "std/http");
