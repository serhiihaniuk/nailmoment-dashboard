// src/app/api/bot/route.ts

import { Bot, Context, InlineKeyboard, webhookCallback } from "grammy";
import { db } from "@/shared/db";
import { speakerVoteTGTable } from "@/shared/db/schema";
import { eq } from "drizzle-orm";
import { nanoid } from "nanoid";

const token = process.env.TG_BOT;
if (!token) throw new Error("BOT_TOKEN is unset");

const bot = new Bot(token);

// --- CONSTANTS AND KEYBOARD GENERATORS ---

const WELCOME_MESSAGE = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç Nail Moment, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è –∫–æ–Ω–∫—É—Ä—Å—É ¬´–ù–∞—Ä–æ–¥–Ω–∏–π —Å–ø—ñ–∫–µ—Ä¬ª, —è–∫–∏–π –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É —Ä–∞–º–∫–∞—Ö –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –Ω–∞—à–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—é —É –í—Ä–æ—Ü–ª–∞–≤—ñ üíõüíÖ

üé§ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –∫–æ–Ω–∫—É—Ä—Å—É –≤–∏—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ü–µ–Ω—ñ Nail Moment 27 –ª–∏–ø–Ω—è 2025 —Ä–æ–∫—É –∑ –∞–≤—Ç–æ—Ä—Å—å–∫–æ—é —Ç–µ–º–æ—é, —è–∫–∞ –ø–µ—Ä–µ–º–æ–∂–µ —É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—ñ.

üìç –§–µ—Å—Ç–∏–≤–∞–ª—å Nail Moment –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è 27 –ª–∏–ø–Ω—è 2025 —É –º—ñ—Å—Ç—ñ –í—Ä–æ—Ü–ª–∞–≤ (–ü–æ–ª—å—â–∞). –î–µ—Ç–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ —É—á–∞—Å—Ç—ñ —Ç–∞ –æ–ø–∏—Å —Ñ–µ—Å—Ç–∏–≤–∞–ª—é —à—É–∫–∞–π –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ.

üìπ –í—ñ–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ñ! –á—Ö –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤ –Ω–∞—à–æ–º—É Telegram-–∫–∞–Ω–∞–ª—ñ –∞–±–æ Instagram. –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏, –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å —É—Å—ñ –∑–∞—è–≤–∫–∏ ‚Äî —Ç–∞–º —Å—Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è!

–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏–º–µ –≤ —Ü—å–æ–º—É —á–∞—Ç-–±–æ—Ç—ñ üí¨
–•—Ç–æ —Å—Ç–∞–Ω–µ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∑—ñ—Ä–∫–æ—é –Ω–∞—à–æ—ó —Å—Ü–µ–Ω–∏? –û–±–∏—Ä–∞—î—à —Å–∞–º–µ —Ç–∏!`;

// Generates the keyboard with all 10 voting buttons
function generateVotingKeyboard() {
  const keyboard = new InlineKeyboard();
  for (let i = 1; i <= 10; i++) {
    keyboard.text(`–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –í—ñ–¥–µ–æ #${i}`, `vote:${i}`);
    // Create a new row every 2 buttons for a cleaner look
    if (i % 2 === 0) {
      keyboard.row();
    }
  }
  return keyboard;
}

// Generates the keyboard for the main menu
function generateMainMenuKeyboard() {
  return new InlineKeyboard().text(
    "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–µ–æ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è",
    "show_videos"
  );
}

// Generates the keyboard shown after a user has successfully voted
function generatePostVoteKeyboard() {
  return new InlineKeyboard()
    .text("–°–∫–∏–Ω—É—Ç–∏ –º—ñ–π –≥–æ–ª–æ—Å üîÑ", "reset_vote")
    .row()
    .text("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main_menu");
}

// --- CORE LOGIC HANDLER ---

async function handleShowVotingProcess(ctx: Context) {
  const telegramUserId = ctx.from!.id;
  try {
    const existingVote = await db
      .select()
      .from(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId))
      .limit(1);

    if (existingVote.length > 0) {
      // If user has voted, show the confirmation message with reset/menu buttons
      await ctx.editMessageText(
        `–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞: ${existingVote[0].voted_for_id}.`,
        { reply_markup: generatePostVoteKeyboard() }
      );
    } else {
      // If user has NOT voted, show the voting dashboard
      await ctx.editMessageText(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ, –∑–∞ —è–∫–µ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –Ω–∏–∂—á–µ.",
        { reply_markup: generateVotingKeyboard() }
      );
    }
  } catch (error) {
    console.error("Error in handleShowVotingProcess:", error);
    await ctx.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

// --- BOT COMMANDS AND CALLBACKS ---

bot.command("start", async (ctx) => {
  await ctx.reply(WELCOME_MESSAGE, {
    reply_markup: generateMainMenuKeyboard(),
  });
});

bot.command("vote", async (ctx) => {
  // To handle the /vote command, we first send a temporary message
  // and then immediately edit it using our core logic handler.
  const tempMessage = await ctx.reply("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è...");
  ctx.update.callback_query = {
    id: "",
    from: ctx.from!,
    message: tempMessage,
    chat_instance: "",
    data: "show_videos",
  };
  await handleShowVotingProcess(ctx);
});

bot.callbackQuery("show_videos", async (ctx) => {
  await ctx.answerCallbackQuery();
  await handleShowVotingProcess(ctx);
});

bot.callbackQuery("reset_vote", async (ctx) => {
  const telegramUserId = ctx.from!.id;
  try {
    await db
      .delete(speakerVoteTGTable)
      .where(eq(speakerVoteTGTable.telegram_user_id, telegramUserId));
    await ctx.answerCallbackQuery({ text: "–í–∞—à –≥–æ–ª–æ—Å —Å–∫–∏–Ω—É—Ç–æ!" });
    // Edit the message back to the voting dashboard
    await ctx.editMessageText(
      "–í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å –≤–∏–¥–∞–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É:",
      { reply_markup: generateVotingKeyboard() }
    );
  } catch (error) {
    console.error("Error resetting vote:", error);
    await ctx.answerCallbackQuery({
      text: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∏–¥–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
      show_alert: true,
    });
  }
});

bot.callbackQuery(/^vote:(\d+)$/, async (ctx) => {
  const telegramUserId = ctx.from!.id;
  const videoNumber = ctx.match[1];
  const votedForId = `video_${videoNumber}`;

  try {
    await db.insert(speakerVoteTGTable).values({
      id: nanoid(),
      telegram_user_id: telegramUserId,
      voted_for_id: votedForId,
    });

    await ctx.answerCallbackQuery({ text: "–î—è–∫—É—é! –í–∞—à –≥–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ." });

    // Edit the message to the confirmation screen
    await ctx.editMessageText(
      `‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏ ${votedForId.replace("_", " ")}.`,
      { reply_markup: generatePostVoteKeyboard() }
    );
  } catch (error) {
    console.error("Error processing vote:", error);
    await ctx.answerCallbackQuery({
      text: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∞–±–æ –≤–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.",
      show_alert: true,
    });
  }
});

// NEW: Handler for returning to the main menu
bot.callbackQuery("main_menu", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageText(WELCOME_MESSAGE, {
    reply_markup: generateMainMenuKeyboard(),
  });
});

bot.on("message:text", async (ctx) => {
  await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.");
});

// --- WEBHOOK SETUP ---
export const POST = webhookCallback(bot, "std/http");
